version: '3.8'

networks:
  mynetwork:
    driver: bridge

services:
  eureka-server:
    build:
      context: ./EurekaService
      dockerfile: Dockerfile
    image: eureka-server:latest
    ports:
      - "8761:8761"
    networks:
      - mynetwork

  neo4j:
    image: neo4j
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password
    volumes:
      - ./data:/data
      - ./import:/var/lib/neo4j/import
    networks:
      - mynetwork

  graph-service:
    build:
      context: ./GraphDatabaseService
      dockerfile: Dockerfile
    image: graph-spring-example:latest
    depends_on:
      - eureka-server
      - neo4j
      - kafka
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_NEO4J_URI: "bolt://neo4j:7687"
      SPRING_NEO4J_USERNAME: neo4j
      SPRING_NEO4J_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./data:/data
    networks:
      - mynetwork

  gateway-api:
    build:
      context: ./GatewayService
      dockerfile: Dockerfile
    image: gateway-api:latest
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - columnar-key-value-service
      - graph-service
    ports:
      - "9003:9000"
    networks:
      - mynetwork

  columnar-key-value-service:
    build:
      context: ./ColumnarDatabaseService
      dockerfile: Dockerfile
    image: columnar-key-value-service:latest
    depends_on:
      - cassandradb
      - eureka-server
      - kafka
    restart: always
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATA_CASSANDRA_CONTACT_POINTS: cassandradb
      SPRING_DATA_CASSANDRA_PORT: 9042
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "9050:9050"
    networks:
      - mynetwork

  cassandradb:
    image: cassandra:latest
    ports:
      - "9042:9042"
    volumes:
      - data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
    networks:
      - mynetwork

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - mynetwork

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - mynetwork

volumes:
  data:
  grafana_storage: { }
